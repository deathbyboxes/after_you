go.property("player_num", 2)
go.property("gamepad_num", 0)

local colors = {
	vmath.vector4(0, 145, 179, 1),
	vmath.vector4(177, 30, 40, 1) 
}
function init(self)
	msg.post(".", "acquire_input_focus")
	sprite.play_flipbook("body#sprite", hash("player".. self.player_num .. "_idle"))
	msg.post("marker#sprite", "play_animation", {id = hash("marker_wht")})
	--sprite.set_constant("marker#sprite", "tint", colors[self.player_num])
	
	self.init_pos = {
		player = go.get_position(), 
		marker = go.get_position("marker")
	}
	self.speed = 3000
	self.trigger_strength = 0
	self.moving = false
	self.animating = false
	move_marker(self)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if self.moving then
		if self.animating == false then
			self.animating = true
			sprite.play_flipbook("body#sprite", hash("player".. self.player_num .. "_walking"))
		end
		local pos = go.get_position()
		pos.x = pos.x + self.speed * self.trigger_strength * dt
		go.set_position(pos)
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("walk") and action.gamepad == self.gamepad_num then
		self.moving = true
		go.cancel_animations("marker", "position.y")
		move_player(self, action)
	elseif action_id == hash("reset") then 
		go.set_position(self.init_pos.player)
	end
end

function move_player(self, action)
	if action.value == 0 then 
		self.moving = false 
		self.animating = false
		sprite.play_flipbook("body#sprite", hash("player".. self.player_num .. "_idle"))
		move_marker(self)
		self.trigger_strength = 0
	end
	if self.moving then
		if self.trigger_strength < action.value then
			self.trigger_strength = action.value
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

function move_marker(self)
	go.set_position(self.init_pos.marker, "marker")
	local _y = go.get_position("marker").y
	_y = _y - 15
	go.animate("marker", "position.y", go.PLAYBACK_LOOP_PINGPONG, _y, go.EASING_INOUTCIRC, 0.8)
end